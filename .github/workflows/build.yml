name: Build and test
env:
  BUILD_DIR: ${{github.workspace}}
  JOB_NUMBER: ${{github.run_number}}

on:
  push:
    branches: [ develop, feature/github_actions ]
  pull_request:
    branches: [ develop ]

  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:

  build:
    env:
      ORACLE_VERSION: ${{matrix.oracle-version}}
      CONNECTION_STR: ${{matrix.connection-str}}
      ORACLE_PASSWORD: oracle
      DOCKER_VOLUME: ${{matrix.docker-volume}}

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - oracle-version: "gvenzl/oracle-xe:11-full"
            connection-str: '127.0.0.1:1521/XE'
# TODO - need to add healthcheck.sh into our containers
#          - oracle-version: "utplsqlv3/oracledb:12c-r1-se2-small"
#            connection-str: '127.0.0.1:1521/ORCLCDB'
#          - oracle-version: "utplsqlv3/oracledb:12c-r2-se2-small"
#            connection-str: '127.0.0.1:1521/ORCLCDB'
          - oracle-version: "gvenzl/oracle-xe:18-slim"
            connection-str: '127.0.0.1:1521/XE'
#          - oracle-version: "utplsqlv3/oracledb:18c-se2-small"
#            connection-str: '127.0.0.1:1521/ORCLCDB'
#          - oracle-version: "utplsqlv3/oracledb:19c-se2-small"
#            connection-str: '127.0.0.1:1521/ORCLCDB'
          - oracle-version: "gvenzl/oracle-xe:21-slim"
            connection-str: '127.0.0.1:1521/XE'

    services:
      oracle:
        image: ${{matrix.oracle-version}}
        env:
          ORACLE_PASSWORD: oracle
#        credentials:
#          username: ${{ secrets.DOCKER_USER }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
        ports:
          - 1521:1521
        options: >-
          --health-cmd healthcheck.sh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: nelonoel/branch-name@v1.0.1
      - uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: .github/variables/.env


      - name: Set buid version number env variables
        run: .github/scripts/set_version_numbers_env.sh

      - name: Update project version & build number to verify that code is deployable after the update
        run:  .travis/update_project_version.sh

      - name: Download latest utPLSQL release
        run: git clone --depth=1 --branch=main https://github.com/utPLSQL/utPLSQL.git $UTPLSQL_DIR

      - name: Add OJDBC home
        run:  mkdir -p ${OJDBC_HOME} && curl -Lk -o ${OJDBC_HOME}/ojdbc8.jar ${OJDBC_URL}/ojdbc8.jar && curl -Lk -o ${OJDBC_HOME}/orai18n.jar ${OJDBC_URL}/orai18n.jar

      - name: Install utPLSQL-cli
        run: curl -Lk -o utPLSQL-cli.zip "https://github.com/utPLSQL/utPLSQL-cli/releases/download/v3.1.8/utPLSQL-cli.zip" && unzip utPLSQL-cli.zip && chmod -R u+x utPLSQL-cli

      - name: Update privileges on sources
        run: chmod -R go+w ./{source,test,examples,${UTPLSQL_DIR}/source}

      - name: Install utPLSQL
        run: docker run --rm -v $(pwd):/utPLSQL -w /utPLSQL --network host --entrypoint bash ${DOCKER_ENV} ${ORACLE_VERSION} .travis/install.sh

      - name: Install utPLSQL release
        run: docker run --rm -v $(pwd):/utPLSQL -w /utPLSQL --network host --entrypoint bash ${DOCKER_ENV} ${ORACLE_VERSION} ./.travis/install_utplsql_release.sh

      - name: Run Examples
        run: docker run --rm -v $(pwd):/utPLSQL -w /utPLSQL --network host --entrypoint bash ${DOCKER_ENV} ${ORACLE_VERSION} ./.travis/run_examples.sh

      - name: Install tests
        run: docker run --rm -v $(pwd):/utPLSQL -w /utPLSQL --network host --entrypoint bash ${DOCKER_ENV} ${ORACLE_VERSION} ./test/install_tests.sh

      - name: Run Tests
        run: bash test/run_tests.sh

      - name: Validate utPLSQL reports format
        run:  bash .travis/validate_report_files.sh

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: |
      ${{ github.repository == 'utPLSQL/utPLSQL' && github.base_ref == null
        && ( startsWith( github.ref, 'refs/heads/release/v' )  || github.ref == 'refs/heads/develop' ) 
      }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      #Populates the value of BRANCH_NAME env variable
      - uses: nelonoel/branch-name@v1.0.1
      - uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: .github/variables/.env

      - name: Set buid version number env variables
        run: .github/scripts/set_version_numbers_env.sh

      - name: Update project version & build number in source code and documentation
        run:  .travis/update_project_version.sh
        
      - name: Push version update to repository
        run:  .travis/push_project_version.sh

      - name: Copy and push documentation to utPLSQL-github-io repo
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        run: .travis/push_docs_to_github_io.sh

# TODO - add slack notifications
